"use client";
import React, { useEffect, useState } from "react";
import { db } from "../../utils/db";
import { pg } from "pg";
import { useUser } from "@clerk/nextjs";
import { getAuth } from "@clerk/nextjs/dist/types/server";

export default function PostVoices({ currentUserObj }) {
  const { user } = useUser();
  const [categories, setCategories] = useState([]);
  const [locations, setLocations] = useState([]);
  const [error, setError] = useState(null);

  // Fetch categories and locations from the database on component mount
  useEffect(() => {
    async function fetchData() {
      "use server";
      try {
        // Fetch categories
        const categoryResult = await db.query(
          `SELECT id, category_name FROM categories`
        );
        setCategories(
          categoryResult.rows.map((row) => ({
            id: row.id,
            name: row.category_name,
          }))
        );

        // Fetch locations
        const locationResult = await db.query(
          `SELECT id, location_name FROM locations`
        );
        setLocations(
          locationResult.rows.map((row) => ({
            id: row.id,
            name: row.location_name,
          }))
        );
      } catch (err) {
        console.error("Error fetching data:", err);
        setError("Failed to load categories or locations.");
      }
    }

    fetchData();
  }, []);
  async function handlePostVoices(formData) {
    const username = user?.username || user?.emailAddress || "Anonymous";
    const content = formData.get("content");
    const category = formData.get("category");
    const location = formData.get("location");
    // const defaultUsername = { currentUserObj, username };
    try {
      await db.query(
        `INSERT INTO voices (username, content, category, location) VALUES ($1,$2, $3, $4)`,
        [username, content, category, location]
      );
      console.log("Voice successfully posted.");
    } catch (err) {
      console.error("Error posting voice:", err);
      return { error: "Failed to post voice." };
    }
  }

  return (
    <div
      className="bg-purple-100 py-6 px-4 rounded-lg shadow-md sticky bottom-0 max-w-lg mx-auto w-full"
      style={{ bottom: "0", left: "0" }}
    >
      <h3 className="text-lg font-bold text-purple-900 mb-4">New Voice</h3>
      <form action={handlePostVoices} className="space-y-4">
        {/* Username Input */}
        <textarea
          name="content"
          placeholder="Raise your voice"
          className="w-full h-15 p-3 border border-purple-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600"
          required
        ></textarea>

        {/* Category Dropdown */}
        <div>
          <label
            htmlFor="category"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Category:
          </label>
          <select
            id="category"
            name="category"
            className="w-full bg-white border border-purple-300 text-gray-700 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-purple-600"
            required
          >
            <option value="" disabled selected>
              Select a category
            </option>
            {categories.map((category) => (
              <option key={category.id} value={category.id}>
                {category.name}
              </option>
            ))}
          </select>
        </div>

        {/* Location Dropdown */}
        <div>
          <label
            htmlFor="location"
            className="block text-sm font-medium text-gray-700 mb-1"
          >
            Location:
          </label>
          <select
            id="location"
            name="location"
            className="w-full bg-white border border-purple-300 text-gray-700 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-purple-600"
            required
          >
            <option value="" disabled selected>
              Select a location
            </option>
            {locations.map((location) => (
              <option key={location.id} value={location.id}>
                {location.name}
              </option>
            ))}
          </select>
        </div>

        <button
          type="submit"
          className="w-full py-2 px-4 bg-purple-600 text-white font-bold rounded-md hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500"
        >
          Post Voice
        </button>
      </form>
    </div>
  );
}
